To automate the deployment of your frontend, backend, and PostgreSQL services on Kubernetes using Ansible, you can create a playbook that uses the `k8s` module. Below, I'll provide an example Ansible playbook structure to deploy all three services, including the necessary PersistentVolume and PersistentVolumeClaim for PostgreSQL.

### Prerequisites

1. **Ansible Installed**: Ensure that Ansible is installed on your machine.
2. **Kubernetes Config**: Ensure you have access to your Kubernetes cluster from your machine (typically through the `~/.kube/config` file).
3. **Docker Images Pushed**: Ensure that your Docker images for the frontend, backend, and PostgreSQL have been pushed to a container registry (e.g., Docker Hub).

### Directory Structure

Here’s a suggested directory structure:

```
ansible/
├── deploy.yaml
└── playbook.yaml
```

### `deploy.yaml`

Create a file named `deploy.yaml` to define your Kubernetes resources.

```yaml
# deploy.yaml
apiVersion: v1
kind: PersistentVolume
metadata:
  name: postgres-pv
spec:
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: /mnt/data/postgres  # Path on the host node

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
        - name: postgres
          image: postgres  # Replace with your custom image if necessary
          env:
            - name: POSTGRES_USER
              value: "john"
            - name: POSTGRES_PASSWORD
              value: "example"
            - name: POSTGRES_DB
              value: "endgame"
          ports:
            - containerPort: 5432
          volumeMounts:
            - mountPath: /var/lib/postgresql/data
              name: postgres-storage
      volumes:
        - name: postgres-storage
          persistentVolumeClaim:
            claimName: postgres-pvc

---
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
spec:
  type: ClusterIP
  ports:
    - port: 5432
      targetPort: 5432
  selector:
    app: postgres

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: backend
  template:
    metadata:
      labels:
        app: backend
    spec:
      containers:
        - name: backend
          image: roshandocker11/endgamebackend:v1  # Replace with your Docker Hub image
          env:
            - name: DB_USER
              value: "john"
            - name: DB_PASS
              value: "example"
            - name: DB
              value: "endgame"
            - name: DB_HOST
              value: "postgres-service"
          ports:
            - containerPort: 5000

---
apiVersion: v1
kind: Service
metadata:
  name: backend-service
spec:
  type: ClusterIP
  ports:
    - port: 5000
      targetPort: 5000
  selector:
    app: backend

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
    spec:
      containers:
        - name: frontend
          image: roshandocker11/endgamefrontend:v1  # Replace with your Docker Hub image
          ports:
            - containerPort: 80

---
apiVersion: v1
kind: Service
metadata:
  name: frontend-service
spec:
  type: LoadBalancer
  ports:
    - port: 80
      targetPort: 80
  selector:
    app: frontend
```

### `playbook.yaml`

Create a file named `playbook.yaml` for your Ansible playbook.

```yaml
# playbook.yaml
- hosts: localhost
  tasks:
    - name: Create Kubernetes resources
      kubernetes.core.k8s:
        state: present
        src: deploy.yaml
        kubeconfig: ~/.kube/config  # Path to your kubeconfig file
```

### Running the Playbook

1. **Install Dependencies**: Make sure you have the required Ansible modules installed:
   ```bash
   ansible-galaxy collection install kubernetes.core
   ```

2. **Run the Playbook**:
   Navigate to the directory where your `playbook.yaml` and `deploy.yaml` are located, and run:
   ```bash
   ansible-playbook playbook.yaml
   ```

### Explanation

- **PersistentVolume and PersistentVolumeClaim**: This ensures your PostgreSQL data persists across Pod restarts.
- **Deployments**: The `Deployment` resource defines your applications (PostgreSQL, backend, and frontend).
- **Services**: `ClusterIP` services allow internal communication between your Pods, while the `LoadBalancer` service exposes your frontend to the outside world.

### Summary
By following the steps outlined above, you can deploy your frontend, backend, and PostgreSQL services on Kubernetes using Ansible, ensuring that everything is managed consistently and can be replicated easily.